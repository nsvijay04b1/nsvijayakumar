AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Resources:
  VijayResumeCounterDynamodb: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "Site"
          AttributeType: "N"
        #- 
          #AttributeName: "Visits"
          #AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "Site"
          KeyType: "HASH"
        #- 
          #AttributeName: "Visits"
          #KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "nsvijayakumar"


  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: lambda-api

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'count'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'Prod'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  LamdaRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "LamdaAccessDynamoDBandS3"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
        - Sid: ReadWriteTable
          Effect: Allow
          Action:
          - "dynamodb:*"
          Resource: "arn:aws:dynamodb:*:*:table/nsvijayakumar"
        - Sid: ConsoleAccess
          Effect: Allow
          Action:
          - "s3:*"
          Resource: "arn:aws:s3:::nsvijayakumar.com/*" 
      Roles: 
        - 
          Ref: "LambdaIamRole"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          # On invoking this function-retrive visitor count, add one, store  in database, return to client
          def handler(event, context):
              dynamodb = boto3.client('dynamodb')
              # Get Visits
              response = dynamodb.get_item(TableName='nsvijayakumar', Key={'Site': {'N': '0'}})
              if "Item" not in  response:
                dynamodb.put_item(TableName='nsvijayakumar', Item={'Site': {'N': '0'},'Visits': {'N': '1'}})
              else:
                visits = int(response["Item"]["Visits"]["N"]) + 1
                # Store Visits
                dynamodb.put_item(TableName='nsvijayakumar', Item={'Site': {'N': '0'},'Visits': {'N': str(visits)}})
              return visits

      Description: AWS Lambda function
      FunctionName: 'lambda-function'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60

